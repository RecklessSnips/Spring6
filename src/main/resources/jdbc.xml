<?xml version="1.0" encoding="UTF-8"?>
<!--context用来进行引入外部文件：placeholder和开启component scan-->
<!--而tx来开启transaction的注解-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

<!--    <context:property-placeholder location="classpath:jdbc.properties"/>-->

<!--    <context:component-scan base-package="JDBC"></context:component-scan>-->

<!--    这三个bean就相当于在配置类里写了一个@bean-->
<!--    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">-->
<!--        <property name="url" value="${jdbc.url}"/>-->
<!--        <property name="driverClassName" value="${jdbc.driver}"/>-->
<!--        <property name="username" value="${jdbc.user}"/>-->
<!--        <property name="password" value="${jdbc.password}"/>-->
<!--    </bean>-->

<!--    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
<!--        <property name="dataSource" ref="druidDataSource"/>-->
<!--    </bean>-->

<!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--        <property name="dataSource" ref="druidDataSource"/>-->
<!--    </bean>-->

<!--    通过 @Transactional表示方法或者类，通过manager来管理所有事务-->
<!--    如果transactional manager的id就是transactionManager，
            则属性：transaction-manager可以省略-->
<!--    <tx:annotation-driven/>-->
</beans>